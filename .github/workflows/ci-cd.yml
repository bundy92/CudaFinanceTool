name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  # Code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          pip install flake8 black mypy
          
      - name: Run linting
        run: |
          flake8 web_interface/ --max-line-length=100
          black --check web_interface/
          mypy web_interface/ --ignore-missing-imports

  # Unit tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          pytest web_interface/ --cov=web_interface --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # CUDA build and test (if GPU available)
  cuda-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up CUDA environment
        uses: Jimver/cuda-toolkit@v0.2.12
        with:
          cuda: '11.8'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          
      - name: Build CUDA application
        run: |
          make clean
          make all
          
      - name: Run CUDA tests
        run: |
          ./bin/test_suite || echo "CUDA tests skipped (no GPU available)"

  # Docker build and test
  docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        run: |
          docker build -t cuda-finance-tool:${{ github.sha }} .
          
      - name: Test Docker image
        run: |
          docker run --rm cuda-finance-tool:${{ github.sha }} python3 -c "print('Docker image test passed')"

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cuda-finance-tool:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment logic here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment logic here
          
      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully" 